name: Build and Upload iOS to App Store

on: [push, pull_request]

jobs:
  build-ios:
    name: Build iOS Project
    runs-on: macos-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: true

      - name: Clean Git State (Prevent Dirty Branch)
        run: |
          git reset --hard
          git clean -fdx
          echo "✅ Git workspace cleaned."

      - name: Cache Library
        uses: actions/cache@v3
        with:
          path: Library
          key: Library-iOS-${{ github.sha }}
          restore-keys: |
            Library-iOS-
            Library-

      - name: Reset Unity License
        run: |
          sudo rm -rf ~/.local/share/unity3d
          sudo rm -rf ~/.config/unity3d
          echo "✅ Unity License Reset Complete"

      - name: Build Xcode Project from Unity
        uses: game-ci/unity-builder@v4
        env:
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          targetPlatform: iOS
          unityVersion: 2023.1.17f1  # Версия Unity
          buildMethod: IOSBuild.BuildIos
          buildName: Unity-iPhone
          buildsPath: build/iOS
          customParameters: "-logFile /dev/stdout -debugCodeOptimization"

      - name: Verify Xcode Project
        run: |
          if [ ! -d "build/iOS/Unity-iPhone.xcodeproj" ]; then
            echo "❌ ERROR: Xcode project not found!"
            exit 1
          fi
          echo "✅ Xcode project found."

      - name: Upload iOS Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: iOS-Build
          path: build/iOS

  archive-ios:
    name: Archive Xcode Project
    runs-on: macos-latest
    needs: build-ios
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download iOS Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: iOS-Build
          path: build/iOS

      - name: Decode and Install Provisioning Profile
        run: |
          echo "${{ secrets.IOS_PROVISION_PROFILE }}" | base64 --decode > Offline_Playing_cards.mobileprovision
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          mv Offline_Playing_cards.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/
          echo "✅ Provisioning profile installed"

      - name: Decode and Install P12 Certificate
        run: |
          echo "🔑 Cleaning keychains..."
          security delete-keychain build.keychain || true
          security create-keychain -p "" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "" build.keychain
          echo "🔑 Importing certificate..."
          echo "${{ secrets.IOS_CERTIFICATE_P12_BASE64 }}" | base64 --decode > certificate.p12
          security import certificate.p12 -k build.keychain -P "${{ secrets.IOS_CERTIFICATE_PASSWORD }}" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple: -s -k "" build.keychain
          echo "✅ Certificate installed"

      - name: Проверка сертификатов в Keychain
        run: |
          security find-identity -v -p codesigning

      - name: Get Provisioning Profile UUID
        run: |
          PROFILE_UUID=$(security cms -D -i ~/Library/MobileDevice/Provisioning\ Profiles/Offline_Playing_cards.mobileprovision | plutil -extract UUID raw -)
          echo "Provisioning Profile UUID: $PROFILE_UUID"
          echo "PROVISIONING_PROFILE_UUID=$PROFILE_UUID" >> $GITHUB_ENV

      - name: Archive Xcode Project
        run: |
          cd build/iOS
          xcodebuild -project Unity-iPhone.xcodeproj \
                     -scheme Unity-iPhone \
                     -sdk iphoneos \
                     -configuration Release \
                     -archivePath output/Unity.xcarchive \
                     CODE_SIGN_STYLE=Manual \
                     DEVELOPMENT_TEAM=${{ secrets.APPLE_DEVELOPER_TEAM_ID }} \
                     PROVISIONING_PROFILE_SPECIFIER="$PROVISIONING_PROFILE_UUID" \
                     archive

      - name: Export .ipa
        run: |
          xcodebuild -exportArchive \
                     -archivePath build/iOS/output/Unity.xcarchive \
                     -exportPath build/iOS/output \
                     -exportOptionsPlist exportOptions.plist

      - name: Upload Archive Artifact
        uses: actions/upload-artifact@v4
        with:
          name: iOS-Archive
          path: build/iOS/output/Unity.ipa

  upload-ios:
    name: Upload iOS Build to App Store
    runs-on: macos-latest
    needs: archive-ios
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download iOS Archive Artifact
        uses: actions/download-artifact@v4
        with:
          name: iOS-Archive
          path: build/iOS/output

      - name: Verify .ipa File
        run: |
          if [ ! -f "build/iOS/output/Unity.ipa" ]; then
            echo "❌ ERROR: .ipa file not found!"
            exit 1
          fi
          echo "✅ .ipa file found."

      - name: Upload to App Store
        env:
          APP_STORE_CONNECT_KEY_ID: ${{ secrets.APP_STORE_CONNECT_KEY_ID }}
          APP_STORE_CONNECT_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
          APP_STORE_CONNECT_PRIVATE_KEY: ${{ secrets.APP_STORE_CONNECT_PRIVATE_KEY }}
        run: |
          echo "${APP_STORE_CONNECT_PRIVATE_KEY}" > AuthKey.p8
          xcrun altool --upload-app -f "build/iOS/output/Unity.ipa" -t ios --apiKey ${APP_STORE_CONNECT_KEY_ID} --apiIssuer ${APP_STORE_CONNECT_ISSUER_ID}
